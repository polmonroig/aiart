
script src="bower_components/jquery/dist/jquery.min.js"
script src="bower_components/popper.js/dist/umd/popper.min.js"
script src="bower_components/ion.rangeSlider/js/ion.rangeSlider.min.js"
script src="bower_components/slick-carousel/slick/slick.min.js"

// Bootstrap javascript
// Uncomment files with functionality you want
script src="bower_components/bootstrap/js/dist/util.js"
script src="bower_components/bootstrap/js/dist/alert.js"
script src="bower_components/bootstrap/js/dist/button.js"
script src="bower_components/bootstrap/js/dist/carousel.js"
script src="bower_components/bootstrap/js/dist/collapse.js"
script src="bower_components/bootstrap/js/dist/dropdown.js"
script src="bower_components/bootstrap/js/dist/modal.js"
script src="bower_components/bootstrap/js/dist/tab.js"
script src="bower_components/bootstrap/js/dist/tooltip.js"
script src="bower_components/bootstrap/js/dist/popover.js"

- if defined? extra_js_files
  - extra_js_files.each do |js_file|
    script src="#{js_file}"


script src="js/stackBlur.js?version=#{template_version}"
script src="js/balance.js?version=#{template_version}"
script src="js/color.js?version=#{template_version}"

script src="js/main.js?version=#{template_version}"
javascript:
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', '#{google_analytics_id}', 'auto');
  ga('send', 'pageview');

/! Google App Engine implementation
script src="js/engine.js"

//FilePond Configuration
script src="bower_components/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js"
script src="bower_components/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"
script src="bower_components/filepond-plugin-image-resize/dist/filepond-plugin-image-resize.js"
script src="bower_components/filepond-plugin-image-transform/dist/filepond-plugin-image-transform.js"
script src="bower_components/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js"
script src="bower_components/filepond-plugin-image-exif-orientation/dist/filepond-plugin-image-exif-orientation.js"
script src="bower_components/filepond/dist/filepond.js"

javascript:
		// Set heatmap canvas size with event listener
		window.addEventListener("resize", resizeHeatmap);

		function resizeHeatmap(){
			if(document.getElementById('balance-image').getElementsByTagName('img')[0]){
					var image_element = document.getElementById('balance-image').getElementsByTagName('img')[0];
					var image_width = image_element.clientWidth;
					var image_height = image_element.clientHeight;
					var size_relation = image_height / image_width;
					var min_relation = 0.5;
					var max_relation = 0.7;
					if(size_relation <= max_relation && size_relation >= min_relation){
							var window_limit = 1350;
							var window_width = window.innerWidth;
							var heatmap_element = document.getElementById('heatmap');
							if(window_limit <= window_width){
									heatmap_element.style.width = "100%";
									heatmap_element.style.height = "auto";
							}
							else{
									heatmap_element.style.width = "auto";
									heatmap_element.style.height = "100%";

							}
					}
			}
		}

		// Set Settings
		var vision = 0;

		function visionCheck(){
				var visionCheckbox = document.getElementsByClassName('checkbox-vision')[0];
				if (visionCheckbox.checked == true){
			    vision = 1;
					document.getElementsByClassName('checkbox-vision')[0].checked = false;
			  } else {
			     vision = 0;
					 document.getElementsByClassName('checkbox-vision')[0].checked = true;
			  }
				console.log(vision);
		}


javascript:

	FilePond.registerPlugin(
		FilePondPluginImageResize,
		FilePondPluginImageTransform,
		FilePondPluginImagePreview,
    FilePondPluginFileValidateType,
		FilePondPluginFileValidateSize,
		FilePondPluginImageExifOrientation
	);

	const ponds = FilePond.parse(document.body);

	FilePond.setOptions({
    server: {
        process: {
            url: `http://127.0.0.1:8080/submit`,
            method: 'POST',
						ondata: (formData) => {
                formData.append('vision', vision);
                return formData;
            },
            onload: (response) => {
								// Check which filepond has a file
								it = 0;
								while(ponds[it++].getFile() == null);
								--it;
								file = ponds[it].getFile().file;
								processImage(JSON.parse(response));
								showImage(file,'color-image');
								showImage(file,'balance-image');

								// Clear filePond for a new upload
								ponds[it].removeFile();
            }
        }
    },
		allowMultiple: false,
		dropOnPage: true,
		dropOnElement: false,
		dropValidation: true,
		stylePanelLayout: 'integrated',
		styleLoadIndicatorPosition: 'center',
		styleProgressIndicatorPosition: 'center',
		acceptedFileTypes: ['image/png', 'image/jpg', 'image/jpeg', 'image/gif'],
		allowImageResize: true,
		imageResizeMode: 'contain',
		imageResizeUpscale: false,
		imageResizeTargetWidth: 800,
		allowImagePreview: true,
		imagePreviewMaxHeight: 256,
		imageTransformOutputQuality: 100,
		allowFileSizeValidation: true,
		maxFileSize: '20MB'
	});

	ponds[0].imagePreviewMaxHeight = 100;
	ponds[1].imagePreviewMaxHeight = 100;

/! Dropzone custom functions

/! Dropzone Menu custom functions
//javascript:
  Dropzone.options.imageDropzoneMenu = {
  url: "http://127.0.0.1:8080/submit",
  method: "post",
  withCredentials: false,
  timeout: 30000,
  parallelUploads: 2,
  uploadMultiple: false,
  maxFilesize: 7,
  paramName: "file",
  createImageThumbnails: false,
  maxThumbnailFilesize: 10,
  thumbnailWidth: document.getElementById("imageDropzoneMenu").offsetWidth*0.6,
  thumbnailHeight: document.getElementById("imageDropzoneMenu").offsetHeight*0.6,
  thumbnailMethod: 'crop',
  resizeWidth: 200,
  resizeHeight: null,
  resizeMimeType: null,
  resizeQuality: 1,
  resizeMethod: 'contain',
  filesizeBase: 1000,
  maxFiles: 1,
  params: {},
  headers: null,
  clickable: true,
  ignoreHiddenFiles: true,
  acceptedFiles: ".jpeg,.jpg,.png",
  acceptedMimeTypes: null,
  autoProcessQueue: true,
  autoQueue: true,
  addRemoveLinks: false,
  previewsContainer: null,
  hiddenInputContainer: "body",
  capture: null,
  renameFilename: null,
  renameFile: null,
  forceFallback: false,
	dictDefaultMessage: "Drop your image here",
  accept: function(file, done) {
    console.log("Uploading...");
    done();
  },
  init: function() {
    this.on("addedfile", function() {
      if (this.files[1]!=null){
        this.removeFile(this.files[0]);
      }
    });

    // Receives response from server
    this.on("success", function(response) {
        console.log("Uploaded!");
        processImage(JSON.parse(response.xhr.responseText));
        showImage(this.files[0],'color-image');
        showImage(this.files[0],'balance-image');
    });

		this.on("complete", function(file) {
   		this.removeAllFiles(true);
			$(".mobile-menu-trigger").click();
		})
  }
	};
